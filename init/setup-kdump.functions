# setup-kdump.functions
#
# (c) 2014, Petr Tesarik <ptesarik@suse.de>, SUSE LINUX Products GmbH
#
# Helper functions needed to set up kdump initrd.
#

#
# Paths and other configuration variables
#

CONFIG=/etc/sysconfig/kdump

#
# Checks whether there is a device in the system which is handled
# by the specified module.
# Parameters:
#   1) modname: kernel module name
# Exit status:
#   zero     if a matching device was found
#   non-zero otherwise
function module_has_device()						   # {{{
{
    local modname="$1"
    local -a aliaslist
    local line

    while read line; do
	aliaslist[${#aliaslist[@]}]="$line"
    done < <(modinfo -k "$kernel_version" -F alias "$modname" 2>/dev/null)

    # for each device in the system, check the device modalias file ...
    find /sys/devices -type f -name modalias -print0 | xargs -0 cat | \
    (
	while read line; do
	    # ... against each modalias of the checked module
	    for modalias in "${aliaslist[@]}"; do
		case "$line" in
		    $modalias)
			exit 0
			;;
	        esac
	    done
	done
	exit 1
    )
}									   # }}}

#
# Get the save directory and protocol.
#
# Output variables:
#   kdump_$name[]  $name as returned by kdumptool print_target, e.g.:
#       kdump_URL[]
#       kdump_Protocol[]
#       kdump_Realpath[]
#   kdump_max      maximum index in kdump_*[]
# Exit status:
#   zero     on success
#   non-zero if kdumptool didn't return any targets
function get_kdump_targets()						   # {{{
{
    kdump_max=0
    eval "$( kdumptool print_target | \
        sed -e "s/'/'\\\\''/g" \
	    -e 's/^$/max=$((kdump_max+1))'\''/' \
	    -e 's/^/kdump_/' \
	    -e "s/: */[\$kdump_max]='/" \
	    -e "s/\$/\'/" )"
    if [ ${#kdump_URL[@]} -eq 0 ] ; then
	echo >&2 "kdumptool print_target failed."
	return 1
    fi
    return 0
}									   # }}}

#
# Get the kdump configuration
# Output variables (consult kdumptool for a complete list):
#   KDUMP_*
#   KEXEC_OPTIONS
#   MAKEDUMPFILE_OPTIONS
# Exit status:
#   zero     on success
#   non-zero if dump_config failed
function get_kdump_config()						   # {{{
{
    local kdump_config=$( kdumptool dump_config --format=shell )
    test $? -eq 0 || return 1
    eval "$kdump_config"
    return 0
}									   # }}}

#
# Get adjusted kdump configuration.
#
# Input variables:
#   KDUMP_* variables (as sourced from $CONFIG)
#   kdump_* variables (as returned by get_kdump_targets)
# Output variables:
#   KDUMP_SAVEDIR   re-created from kdump_* variables
#   KDUMP_HOST_KEY  default from ssh-keygen if not set previously
#   kdump_over_ssh  non-empty if SSH is involved in dump saving
# Output:
#   "kdumptool dump_config" with some variables modified
function modify_config()						   # {{{
{
    #
    # Special handling for some protocols
    KDUMP_SAVEDIR=
    kdump_over_ssh=
    local i=0
    while [ $i -le $kdump_max ] ; do
	protocol="${kdump_Protocol[i]}"

	# replace original path with resolved path
	test -z "$KDUMP_SAVEDIR" || KDUMP_SAVEDIR="$KDUMP_SAVEDIR "
	if [ "$protocol" = "file" ] ; then
            KDUMP_SAVEDIR="${KDUMP_SAVEDIR}file://${kdump_Realpath[i]}"
	else
            KDUMP_SAVEDIR="${KDUMP_SAVEDIR}${kdump_URL[i]}"
	fi

	#
	# get the host key, if needed
	if [ "$protocol" = "sftp" ] ; then
            kdump_over_ssh=yes
            if [ -z "$KDUMP_HOST_KEY" ] ; then
		KDUMP_HOST_KEY=$(
		    ssh-keygen -F "$kdump_Host" 2>/dev/null | \
		    awk '/^[^#]/ { if (NF==3) { print $3; exit } }'
		)
            fi
	fi

	i=$((i+1))
    done

    #
    # dump the configuration file, modifying:
    #   KDUMP_SAVEDIR  -> resolved path
    #   KDUMP_HOST_KEY -> target host public key
    kdumptool dump_config --format=shell | \
	KDUMP_SAVEDIR="$KDUMP_SAVEDIR" KDUMP_HOST_KEY="$KDUMP_HOST_KEY" \
	awk -F= '{
    id = $1
    sub(/^[ \t]*/, "", id)
    if (id in ENVIRON)
        print $1"=\""ENVIRON[id]"\""
    else
        print
}'
}									   # }}}

#
# Keep only required devices in multipath.conf
#
# Parameters:
#   1) devices: list of all required block devices
# Output:
#   filtered multipath.conf
function modify_multipath()						   # {{{
{
    local devices="$1"
    local i bd scsi_id
    local -a wwids

    i=0
    for bd in $devices ; do
	scsi_id=$(/lib/udev/scsi_id --whitelisted --device="$bd")
	[ -z "$scsi_id" ] && continue
	wwids[i++]="wwid "\""$scsi_id"\"
    done
    kdumptool multipath "${wwids[@]}" \
	< /etc/multipath.conf
}									   # }}}

#
# Copy SSH keys to the target
# Parameters:
#   1) dest: root of the temporary area
function copy_ssh_keys()						   # {{{
{
    local dest="${1%/}"

    if [ -z "$KDUMP_HOST_KEY" ] ; then
        echo "WARNING: target SSH host key not found. " \
             "Man-in-the-middle attack is possible." >&2
    fi
    if [ -f /root/.ssh/id_dsa ] && [ -f /root/.ssh/id_dsa.pub ] ; then
        mkdir -p "${dest}/.ssh"
        cp /root/.ssh/id_dsa "${dest}/.ssh"
        cp /root/.ssh/id_dsa.pub "${dest}/.ssh"
    fi
    if [ -f /root/.ssh/id_rsa ] && [ -f /root/.ssh/id_rsa.pub ] ; then
        mkdir -p "${dest}/.ssh"
        cp /root/.ssh/id_rsa "${dest}/.ssh"
        cp /root/.ssh/id_rsa.pub "${dest}/.ssh"
    fi
}									   # }}}
