## Path:        System/Kernel/Kdump
## Description: Crash Dump Configuration

## Type:	string
## Default:	""
## ServiceRestart:	kdump
#
# Kernel Version string for the -kdump kernel. Use an empty string to
# auto-detect a suitable kernel.
#
# See also: kdump(5).
#
KDUMP_KERNELVER=""

## Type:	string
## Default:	""
## ServiceRestart:	kdump
#
# The kdump commandline is the command line that needs to be passed off to
# the kdump kernel. If a command line is not specified, the default will be
# taken from /proc/cmdline and adjusted.
#
# WARNING: There are a few options that always should be passed to the kdump
# kernel. See kdump(5) for details. Don't use that variable, consider using
# KDUMP_COMMANDLINE_APPEND instead.
#
KDUMP_COMMANDLINE=""

## Type:        string
## Default:     ""
## ServiceRestart:     kdump
#
# Set this variable if you only want to _append_ values to the default
# command line string. The string gets also appended if KDUMP_COMMANDLINE
# is set.
#
# See also: kdump(5).
#
KDUMP_COMMANDLINE_APPEND=""

## Type:	string
## Default:	""
## ServiceRestart:	kdump
#
# Additional arguments passed to kexec. Normally you don't have to modify
# the default here.
#
# See also: kdump(5).
#
KEXEC_OPTIONS=""

## Type:	yesno
## Default:	yes
#
# Immediately reboot after saving the core in the kdump kernel?
#
# See also: kdump(5).
#
KDUMP_IMMEDIATE_REBOOT="yes"

## Type:	string
## Default:	""
#
# A script or command executed to process and transfer the dump image.
# It can read the dump image either via /proc/vmcore or /dev/oldmem.
#
# WARNING: Setting that option will make most of the other configuration
# options useless. Don't use that option. It's also not supported.
#
# See also: kdump(5).
#
KDUMP_TRANSFER=""

## Type:	string
## Default:	"file:///var/log/dump"
#
# Which directory should the dumps be saved in by the default dumper?
# This can be:
#
#   - a local file, for example "file:///var/log/dump" (or, deprecated,
#     just "/var/log/dump")
#   - a FTP server, for example "ftp://user:password@host/var/log/dump"
#   - a SSH server, for example "ssh://user:password@host/var/log/dump"
#   - a NFS share, for example "nfs://server/export/var/log/dump"
#   - a CIFS (SMB) share, for example
#     "cifs://user:password@host/share/var/log/dump"
#
# See also: kdump(5) which contains an exact specification for the URL format.
# Consider using the "yast2 kdump" module if you are unsure.
#
KDUMP_SAVEDIR="file:///var/log/dump"

## Type:	integer
## Default:	5
#
# Specifies how many old dumps are kept.  If the number of dump files
# exceeds this number, older dumps are removed.
#
# You can prevent the automatic removal by setting zero to this.
# Set KDUMP_KEEP_OLD_DUMPS to "-1" is you want to delete all old
# dumps before saving the new dump.
#
# See also: kdump(5).
#
KDUMP_KEEP_OLD_DUMPS=5

## Type:	integer
## Default:	64
#
# Specifies the minimal free disk space (in MB unit) on the dump partition.
# If the free disk space is less than the sum of this value and memory size,
# we won't save vmcore file in order to keep the system sane.
#
# Setting zero forces to dump without check.
#
# See also: kdump(5).
#
KDUMP_FREE_DISK_SIZE=64

## Type:        integer
## Default:     3
#
# Determines if kdump uses verbose output. This value is a bitmask:
#
# 1: kdump command line is written to system log when executing
#    /etc/init.d/kdump
# 2: progress is written to stdout while dumping
# 4: kdump command line is written so standard output when executing
#    /etc/init.d/kdump
# 8: Debugging while saving dump.
#
# See also: kdump(5).
#
KDUMP_VERBOSE=3

## Type:        integer
## Default:     0
#
# Determines the dump level. If KDUMP_DUMPLEVEL non-zero 0, then makedumpfile
# is used to strip pages that may not be necessary for analysing. 0 means
# no stripping, and 31 is the maximum dump level, i.e. 0 produces the
# largest dump files and 31 the smallest.
#
# See kdump(5) or makedumpfile(8) for a full description what that different
# dump levels mean.
#
KDUMP_DUMPLEVEL=0

## Type:        list(,compressed,ELF)
## Default:     "compressed"
#
# This variable specifies the dump format.
#
# See also: kdump(5).
KDUMP_DUMPFORMAT="ELF"

## Type:        boolean
## Default:     false
#
# By default, kdumptool(8) copies multiple files with the save_dump action.
# Set that value to "true" to make kdumptool trying to save the next file even
# if saving the previous file failed, or set that to "false" to let the program
# immediately abort.
#
# See also: kdump(5).
#
KDUMP_CONTINUE_ON_ERROR="false"

## Type:        string
## Default:     ""
#
# This is a space-separated list of programs (full path) that are required by
# KDUMP_TRANSFER, KDUMP_PRESCRIPT or KDUMP_POSTSCRIPT.
#
# Dynamic libraries that are required by that programs don't have to be included
# as they are resolved automatically. However, it's necessary to include other
# runtime requirements because it's not possible to resolve them automatically.
#
# See also: kdump(5).
#
KDUMP_REQUIRED_PROGRAMS=""

## Type:        string
## Default:     ""
#
# Program that is executed before taking the dump. You have to include that
# program in KDUMP_REQUIRED_PROGRAMS.
#
# See also: kdump(5).
#
KDUMP_PRESCRIPT=""

## Type:        string
## Default:     ""
#
# Program that is executed after taking the dump and before the system is
# rebooted. You have to include that program in KDUMP_POSTSCRIPT.
#
# See also: kdump(5).
#
KDUMP_POSTSCRIPT=""

## Type:        yesno
## Default:     "yes"
#
# Not only copy the dump to KDUMP_SAVEDIR but also the installed kernel.
# If the debugging information is installed, also the debug information will
# be copied. But only the kernel is copied, not all modules.
#
# See also: kdump(5).
#
KDUMP_COPY_KERNEL="yes"

## Type:        string(NOSPARSE)
## Default:     ""
#
# Space-separated list of flags to tweak the run-time behaviour of kdumptool.
# Currently, only one flag is supported: NOSPARSE to disable creation of sparse
# files.
#
# See also: kdump(5).
#
KDUMPTOOL_FLAGS=""

